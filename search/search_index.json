{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Calf - Compose Adaptive Look &amp; Feel","text":"<p>Calf is a library that allows you to easily create adaptive UIs for your Compose Multiplatform apps.</p> <p> </p> <p></p> <p>Calf stands for Compose Adaptive Look &amp; Feel</p>"},{"location":"#artifacts","title":"Artifacts","text":"Artifact Description Platforms Version calf-ui Adaptive UI components Android, iOS, Desktop calf-file-picker Native File Picker wrapper Android, iOS, Desktop calf-permissions API that allows you to handle permissions Android, iOS calf-geo API that allows you to access geolocation Coming soon... \ud83d\udea7 \ud83d\udea7 Coming soon... \ud83d\udea7 \ud83d\udea7 calf-navigation Native navigation wrapper Coming soon... \ud83d\udea7 \ud83d\udea7 Coming soon... \ud83d\udea7 \ud83d\udea7 calf-map Native Maps wrapper Coming soon... \ud83d\udea7 \ud83d\udea7 Coming soon... \ud83d\udea7 \ud83d\udea7 calf-media Video/Audio player Coming soon... \ud83d\udea7 \ud83d\udea7 Coming soon... \ud83d\udea7 \ud83d\udea7 calf-notification Notification manager Coming soon... \ud83d\udea7 \ud83d\udea7 Coming soon... \ud83d\udea7 \ud83d\udea7 calf-sf-symbols Apple SF Symbols icons Coming soon... \ud83d\udea7 \ud83d\udea7 Coming soon... \ud83d\udea7 \ud83d\udea7 <p>The main focus for now is Android and iOS, but more Desktop components are coming that allows you to create adaptive UIs for Desktop as well (Windows, macOS, Linux)</p>"},{"location":"#contribution","title":"Contribution","text":"<p>If you've found an error in this sample, please file an issue.  Feel free to help out by sending a pull request .</p> <p>Code of Conduct</p>"},{"location":"#find-this-library-useful","title":"Find this library useful?","text":"<p>Support it by joining stargazers for this repository.   Also, follow me on GitHub for more libraries! \ud83e\udd29</p> <p>You can always </p>"},{"location":"#license","title":"License","text":"<pre><code>Copyright 2023 Mohamed Rejeb\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"},{"location":"code_of_conduct/","title":"Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or   advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic   address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code_of_conduct/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at colin at colinwhite.me. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.</p> <p>Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html</p> <p>For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq</p>"},{"location":"filepicker/","title":"File Picker","text":""},{"location":"filepicker/#installation","title":"Installation","text":"<p>Add the following dependency to your module <code>build.gradle.kts</code> file:</p> <pre><code>implementation(\"com.mohamedrejeb.calf:calf-file-picker:0.3.1\")\n</code></pre>"},{"location":"filepicker/#usage","title":"Usage","text":"<p>Calf File Picker allows you to pick files from the device storage.</p> Android iOS <pre><code>val pickerLauncher = rememberFilePickerLauncher(\n    type = FilePickerFileType.Image,\n    selectionMode = FilePickerSelectionMode.Single,\n    onResult = { files -&gt;\n        files.firstOrNull()?.let { file -&gt;\n            // Do something with the selected file\n            // You can get the ByteArray of the file\n            file.readByteArray()\n        }\n    }\n)\n\nButton(\n    onClick = {\n        pickerLauncher.launch()\n    },\n    modifier = Modifier.padding(16.dp)\n) {\n    Text(\"Open File Picker\")\n}\n</code></pre>"},{"location":"filepicker/#filepickerfiletype","title":"FilePickerFileType","text":"<p><code>FilePickerFileType</code> allows you to specify the type of files you want to pick:</p> <ul> <li><code>FilePickerFileType.Image</code> - Allows you to pick images only</li> <li><code>FilePickerFileType.Video</code> - Allows you to pick videos only</li> <li><code>FilePickerFileType.ImageView</code> - Allows you to pick images and videos only</li> <li><code>FilePickerFileType.Audio</code> - Allows you to pick audio files only</li> <li><code>FilePickerFileType.Document</code> - Allows you to pick documents only</li> <li><code>FilePickerFileType.Text</code> - Allows you to pick text files only</li> <li><code>FilePickerFileType.Pdf</code> - Allows you to pick PDF files only</li> <li><code>FilePickerFileType.Presentation</code> - Allows you to pick presentation files only</li> <li><code>FilePickerFileType.Spreadsheet</code> - Allows you to pick spreadsheet files only</li> <li><code>FilePickerFileType.Word</code> - Allows you to pick compressed word only</li> <li><code>FilePickerFileType.All</code> - Allows you to pick all types of files</li> <li><code>FilePickerFileType.Folder</code> - Allows you to pick folders</li> </ul> <p>You can also specify the file types you want to pick by using the <code>FilePickerFileType.Custom</code> type:</p> <pre><code>val type = FilePickerFileType.Custom(\n    \"text/plain\"\n)\n</code></pre>"},{"location":"filepicker/#filepickerselectionmode","title":"FilePickerSelectionMode","text":"<p><code>FilePickerSelectionMode</code> allows you to specify the selection mode of the file picker:</p> <ul> <li><code>FilePickerSelectionMode.Single</code> - Allows you to pick a single file</li> <li><code>FilePickerSelectionMode.Multiple</code> - Allows you to pick multiple files</li> </ul>"},{"location":"installation/","title":"Installation","text":"<p>Add the following dependencies to your module <code>build.gradle.kts</code> file:</p> <pre><code>// For Adaptive UI components\napi(\"com.mohamedrejeb.calf:calf-ui:0.3.1\")\n\n// For Adaptive FilePicker\nimplementation(\"com.mohamedrejeb.calf:calf-file-picker:0.3.1\")\n\n// For Permissions\nimplementation(\"com.mohamedrejeb.calf:calf-permissions:0.3.1\")\n</code></pre> <p>If you are using <code>calf-ui</code> artifact, make sure to export it to binaries:</p>"},{"location":"installation/#regular-framewoek","title":"Regular Framewoek","text":"<pre><code>...\nkotlin {\n    ...\n    targets\n        .filterIsInstance&lt;KotlinNativeTarget&gt;()\n        .filter { it.konanTarget.family == Family.IOS }\n        .forEach {\n            it.binaries.framework {\n                ...\n                export(\"com.mohamedrejeb.calf:calf-ui:0.3.1\")\n            }\n        }\n    ...\n}\n...\n</code></pre>"},{"location":"installation/#cocoapods","title":"CocoaPods","text":"<pre><code>...\nkotlin {\n    ...\n    cocoapods {\n        ...\n        framework {\n            ...\n            export(\"com.mohamedrejeb.calf:calf-ui:0.3.1\")\n        }\n    }\n    ...\n}\n...\n</code></pre> <p>Important: Exporting <code>calf-ui</code> to binaries is required to make it work on iOS.</p>"},{"location":"permissions/","title":"Permissions","text":""},{"location":"permissions/#installation","title":"Installation","text":"<p>Add the following dependency to your module <code>build.gradle.kts</code> file:</p> <pre><code>implementation(\"com.mohamedrejeb.calf:calf-permissions:0.3.1\")\n</code></pre>"},{"location":"permissions/#usage","title":"Usage","text":"<p><code>rememberPermissionState</code> and <code>rememberMultiplePermissionsState</code> APIs</p> <p>The <code>rememberPermissionState(permission: Permission)</code> API allows you to request a certain permission to the user and check for the status of the permission.  <code>rememberMultiplePermissionsState(permissions: List&lt;Permission&gt;)</code> offers the same but for multiple permissions at the same time.</p> <p>You can use the <code>launchPermissionRequest()</code> method to launch the permission request dialog.</p> <p>You can check the status of the permission using the <code>status</code> property of the <code>PermissionState</code> object.</p> <p>example: <code>cameraPermissionState.status.isGranted</code></p> Android iOS <pre><code>// Camera permission state\nval cameraPermissionState = rememberPermissionState(\n    Permission.Camera\n)\n\nif (cameraPermissionState.status.isGranted) {\n    Text(\"Camera permission Granted\")\n} else {\n    Button(\n        onClick = { cameraPermissionState.launchPermissionRequest() }\n    ) {\n        Text(\"Request permission\")\n    }\n}\n</code></pre>"},{"location":"permissions/#permissions_1","title":"Permissions","text":""},{"location":"permissions/#camera-permission","title":"Camera Permission","text":"<p>To request the camera permission, use <code>Permission.Camera</code>.</p>"},{"location":"permissions/#android","title":"Android","text":"<p>On Android you need to add the following permission to your <code>AndroidManifest.xml</code> file:</p> <pre><code>&lt;uses-permission android:name=\"android.permission.CAMERA\" /&gt;\n</code></pre>"},{"location":"permissions/#ios","title":"iOS","text":"<p>On iOS you need to add the following key to your <code>Info.plist</code> file:</p> <pre><code>&lt;key&gt;NSCameraUsageDescription&lt;/key&gt;\n&lt;string&gt;Camera permission is required to take pictures&lt;/string&gt;\n</code></pre> <p>The string value is the message that will be displayed to the user when the permission is requested.</p>"},{"location":"permissions/#gallery-permission","title":"Gallery Permission","text":"<p>To request the gallery permission, use <code>Permission.Gallery</code>.</p>"},{"location":"permissions/#android_1","title":"Android","text":"<p>This permission is always granted on Android.</p>"},{"location":"permissions/#ios_1","title":"iOS","text":"<p>On iOS you need to add the following key to your <code>Info.plist</code> file:</p> <pre><code>&lt;key&gt;NSPhotoLibraryUsageDescription&lt;/key&gt;\n&lt;string&gt;Gallery permission is required to pick images&lt;/string&gt;\n</code></pre> <p>The string value is the message that will be displayed to the user when the permission is requested.</p>"},{"location":"permissions/#read-storage-permission","title":"Read Storage Permission","text":"<p>To request the read storage permission, use <code>Permission.ReadStorage</code>.</p>"},{"location":"permissions/#android_2","title":"Android","text":"<p>On Android you need to add the following permission to your <code>AndroidManifest.xml</code> file:</p> <pre><code>&lt;uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" /&gt;\n</code></pre>"},{"location":"permissions/#ios_2","title":"iOS","text":"<p>This permission is always granted on iOS.</p>"},{"location":"permissions/#write-storage-permission","title":"Write Storage Permission","text":"<p>To request the write storage permission, use <code>Permission.WriteStorage</code>.</p>"},{"location":"permissions/#android_3","title":"Android","text":"<p>On Android you need to add the following permission to your <code>AndroidManifest.xml</code> file:</p> <pre><code>&lt;uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" /&gt;\n&lt;uses-permission android:name=\"android.permission.MANAGE_EXTERNAL_STORAGE\"\n    tools:ignore=\"ScopedStorage\" /&gt;\n</code></pre>"},{"location":"permissions/#ios_3","title":"iOS","text":"<p>This permission is always granted on iOS.</p>"},{"location":"permissions/#location-permission","title":"Location Permission","text":"<p>To request the location permission, use <code>Permission.FineLocation</code> or <code>Permission.CoarseLocation</code>.</p>"},{"location":"permissions/#android_4","title":"Android","text":"<p>On Android you need to add the following permission to your <code>AndroidManifest.xml</code> file:</p> <pre><code>&lt;!-- For fine location --&gt;\n&lt;uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" /&gt;\n&lt;!-- For coarse location --&gt;\n&lt;uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" /&gt;\n</code></pre>"},{"location":"permissions/#ios_4","title":"iOS","text":"<p>On iOS you need to add the following key to your <code>Info.plist</code> file:</p> <pre><code>&lt;key&gt;NSLocationWhenInUseUsageDescription&lt;/key&gt;\n&lt;string&gt;Location permission is required to get your location&lt;/string&gt;\n</code></pre> <p>The string value is the message that will be displayed to the user when the permission is requested.</p>"},{"location":"permissions/#remote-notification-permission","title":"Remote Notification Permission","text":"<p>To request the remote notification permission, use <code>Permission.RemoteNotification</code>.</p>"},{"location":"permissions/#android_5","title":"Android","text":"<p>This permission is always granted on Android.</p>"},{"location":"permissions/#ios_5","title":"iOS","text":"<p>There is no need to add anything to your <code>Info.plist</code> file to request this permission.</p>"},{"location":"permissions/#record-audio-permission","title":"Record Audio Permission","text":"<p>To request the record audio permission, use <code>Permission.RecordAudio</code>.</p>"},{"location":"permissions/#android_6","title":"Android","text":"<p>On Android you need to add the following permission to your <code>AndroidManifest.xml</code> file:</p> <pre><code>&lt;uses-permission android:name=\"android.permission.RECORD_AUDIO\" /&gt;\n</code></pre>"},{"location":"permissions/#ios_6","title":"iOS","text":"<p>On iOS you need to add the following key to your <code>Info.plist</code> file:</p> <pre><code>&lt;key&gt;NSMicrophoneUsageDescription&lt;/key&gt;\n&lt;string&gt;Record audio permission is required to record audio&lt;/string&gt;\n</code></pre> <p>The string value is the message that will be displayed to the user when the permission is requested.</p>"},{"location":"permissions/#bluetooth-permission","title":"Bluetooth Permission","text":"<p>To request the bluetooth permission, use <code>Permission.BluetoothLe</code> or <code>Permission.BluetoothScan</code> or <code>Permission.BluetoothConnect</code> or <code>Permission.BluetoothAdvertise</code>.</p>"},{"location":"permissions/#android_7","title":"Android","text":"<p>On Android you need to add the following permission to your <code>AndroidManifest.xml</code> file:</p> <pre><code>&lt;!-- For Bluetooth LE --&gt;\n&lt;uses-permission android:name=\"android.permission.BLUETOOTH\" /&gt;\n&lt;!-- For Bluetooth Scan --&gt;\n&lt;uses-permission android:name=\"android.permission.BLUETOOTH_ADMIN\" /&gt;\n&lt;!-- For Bluetooth Connect --&gt;\n&lt;uses-permission android:name=\"android.permission.BLUETOOTH_CONNECT\" /&gt;\n&lt;!-- For Bluetooth Advertise --&gt;\n&lt;uses-permission android:name=\"android.permission.BLUETOOTH_ADVERTISE\" /&gt;\n</code></pre>"},{"location":"permissions/#ios_7","title":"iOS","text":"<p>On iOS you need to add the following key to your <code>Info.plist</code> file:</p> <pre><code>&lt;key&gt;NSBluetoothAlwaysUsageDescription&lt;/key&gt;\n&lt;string&gt;Bluetooth permission is required to use Bluetooth&lt;/string&gt;\n</code></pre> <p>The string value is the message that will be displayed to the user when the permission is requested.</p>"},{"location":"ui/","title":"Adaptive UI","text":""},{"location":"ui/#installation","title":"Installation","text":"<p>Add the following dependency to your module <code>build.gradle.kts</code> file:</p> <pre><code>api(\"com.mohamedrejeb.calf:calf-ui:0.3.1\")\n</code></pre> <p>If you are using <code>calf-ui</code> artifact, make sure to export it to binaries:</p>"},{"location":"ui/#regular-framewoek","title":"Regular Framewoek","text":"<pre><code>...\nkotlin {\n    ...\n    targets\n        .filterIsInstance&lt;KotlinNativeTarget&gt;()\n        .filter { it.konanTarget.family == Family.IOS }\n        .forEach {\n            it.binaries.framework {\n                ...\n                export(\"com.mohamedrejeb.calf:calf-ui:0.3.1\")\n            }\n        }\n    ...\n}\n...\n</code></pre>"},{"location":"ui/#cocoapods","title":"CocoaPods","text":"<pre><code>...\nkotlin {\n    ...\n    cocoapods {\n        ...\n        framework {\n            ...\n            export(\"com.mohamedrejeb.calf:calf-ui:0.3.1\")\n        }\n    }\n    ...\n}\n...\n</code></pre> <p>Important: Exporting <code>calf-ui</code> to binaries is required to make it work on iOS.</p>"},{"location":"ui/#usage","title":"Usage","text":""},{"location":"ui/#adaptivealertdialog","title":"AdaptiveAlertDialog","text":"<p><code>AdaptiveAlertDialog</code> is a dialog that adapts to the platform it is running on. It is a wrapper around <code>AlertDialog</code> on Android and <code>UIAlertController</code> on iOS.</p> Android iOS <pre><code>var showDialog by remember { mutableStateOf(false) }\n\nButton(\n    onClick = { showDialog = true },\n) {\n    Text(\"Show Alert Dialog\")\n}\n\nif (showDialog) {\n    AdaptiveAlertDialog(\n        onConfirm = { showDialog = false },\n        onDismiss = { showDialog = false },\n        confirmText = \"Ok\",\n        dismissText = \"Cancel\",\n        title = \"Alert Dialog\",\n        text = \"This is a native alert dialog from Calf\",\n    )\n}\n</code></pre>"},{"location":"ui/#adaptivebottomsheet","title":"AdaptiveBottomSheet","text":"<p><code>AdaptiveBottomSheet</code> is a bottom sheet that adapts to the platform it is running on. It is a wrapper around <code>ModalBottomSheet</code> on Android and <code>UIModalPresentationPopover</code> on iOS.</p> Android iOS <pre><code>val scope = rememberCoroutineScope()\nval sheetState = rememberAdaptiveSheetState()\nvar openBottomSheet by remember { mutableStateOf(false) }\n\nBox(\n    modifier = Modifier.fillMaxSize()\n) {\n    Button(\n        onClick = { openBottomSheet = true },\n    ) {\n        Text(\"Show Bottom Sheet\")\n    }\n\n    if (openBottomSheet) {\n        AdaptiveBottomSheet(\n            onDismissRequest = { openBottomSheet = false },\n            adaptiveSheetState = sheetState,\n        ) {\n            Button(\n                onClick = {\n                    scope.launch { sheetState.hide() }.invokeOnCompletion {\n                        if (!sheetState.isVisible) {\n                            openBottomSheet = false\n                        }\n                    }\n                }\n            ) {\n                Text(\"Close\")\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"ui/#adaptivecircularprogressindicator","title":"AdaptiveCircularProgressIndicator","text":"<p><code>AdaptiveCircularProgressIndicator</code> is a circular progress indicator that adapts to the platform it is running on. It is a wrapper around <code>CircularProgressIndicator</code> on Android, and it implements similar look to <code>UIActivityIndicatorView</code> on iOS.</p> Android iOS <pre><code>AdaptiveCircularProgressIndicator(\n    modifier = Modifier.size(50.dp),\n    color = Color.Red,\n)\n</code></pre>"},{"location":"ui/#adaptivedatepicker","title":"AdaptiveDatePicker","text":"<p><code>AdaptiveDatePicker</code> is a date picker that adapts to the platform it is running on. It is a wrapper around <code>DatePicker</code> on Android and <code>UIDatePicker</code> on iOS.</p> Android iOS <pre><code>val state = rememberAdaptiveDatePickerState()\n\nLaunchedEffect(state.selectedDateMillis) {\n    // Do something with the selected date\n}\n\nAdaptiveDatePicker(\n    state = state,\n)\n</code></pre>"},{"location":"ui/#adaptivetimepicker","title":"AdaptiveTimePicker","text":"<p><code>AdaptiveTimePicker</code> is a time picker that adapts to the platform it is running on. It is a wrapper around <code>TimePicker</code> on Android and <code>UIDatePicker</code> on iOS.</p> Android iOS <pre><code>val state = rememberAdaptiveTimePickerState()\n\nLaunchedEffect(state.hour, state.minute) {\n    // Do something with the selected time\n}\n\nAdaptiveTimePicker(\n    state = state,\n    modifier = Modifier\n)\n</code></pre>"},{"location":"ui/#webview","title":"WebView","text":"<p><code>WebView</code> is a view that adapts to the platform it is running on. It is a wrapper around <code>WebView</code> on Android, <code>WKWebView</code> on iOS and JavaFX <code>WebView</code> on Desktop.</p> Android iOS <pre><code>val state = rememberWebViewState(\n    url = \"https://github.com/MohamedRejeb\"\n)\n\nLaunchedEffect(state.isLoading) {\n    // Get the current loading state\n}\n\nWebView(\n    state = state,\n    modifier = Modifier\n        .fillMaxSize()\n)\n</code></pre>"},{"location":"ui/#web-view-settings","title":"Web View Settings","text":"<p>You can customize the web view settings by changing the <code>WebSettings</code> object in the <code>WebViewState</code>:</p> <pre><code>val state = rememberWebViewState(\n    url = \"https://github.com/MohamedRejeb\"\n)\n\nLaunchedEffect(Unit) {\n    // Enable JavaScript\n    state.settings.javaScriptEnabled = true\n\n    // Enable Zoom in Android\n    state.settings.androidSettings.supportZoom = true\n}\n</code></pre>"},{"location":"ui/#call-javascript","title":"Call JavaScript","text":"<p>You can call JavaScript functions from the web view by using the <code>evaluateJavaScript</code> function:</p> <pre><code>val state = rememberWebViewState(\n    url = \"https://github.com/MohamedRejeb\"\n)\n\nLaunchedEffect(Unit) {\n    val jsCode = \"\"\"\n        document.body.style.backgroundColor = \"red\";\n        document.title\n    \"\"\".trimIndent()\n\n    // Evaluate the JavaScript code\n    state.evaluateJavaScript(jsCode) {\n        // Do something with the result\n        println(\"JS Response: $it\")\n    }\n}\n</code></pre> <p>Note: The <code>evaluateJavaScript</code> method only works when you enable JavaScript in the web view settings.</p>"}]}